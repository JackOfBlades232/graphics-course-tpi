#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

#include "draw.h"
#include "geometry.h"


layout(local_size_x = BASE_WORK_GROUP_SIZE) in;

layout(push_constant) uniform params_t
{
  mat4 mProjView;
} params;


// @TODO: 4x3
layout(binding = 0, set = 0) readonly buffer instance_matrices_t
{
  mat4 instanceMatrices[];
};
layout(binding = 1, set = 0) readonly buffer all_instances_t
{
  CullableInstance allInstances[];
};
layout(binding = 2, set = 0) readonly buffer bboxes_t
{
  BBox bboxes[];
};

layout(binding = 3, set = 0) writeonly buffer instances_t
{
  DrawableInstance markedInstances[];
};
layout(binding = 4, set = 0) buffer commands_t
{
  IndirectCommand commands[];
};

bool point_is_in_frustum(vec3 p)
{
  return p.x >= -1.f && p.x <= 1.f && p.y >= -1.f && p.y <= 1.f && p.z >= 0.f && p.z <= 1.f;
}

vec3 world_to_clip(vec4 v)
{
  const vec4 hom = params.mProjView * v;
  return (hom / hom.w).xyz;
}

void main(void)
{
  const uint idx = gl_GlobalInvocationID.x;
  if (idx < allInstances.length())
  {
    const CullableInstance inst = allInstances[idx];
    const BBox bbox = bboxes[inst.commandId]; 
    const mat4 instMat = instanceMatrices[inst.matrixId];

    const vec3 p1 = world_to_clip(instMat * bbox.min);
    const vec3 p2 = world_to_clip(instMat * vec4(bbox.min.x, bbox.min.y, bbox.max.z, 1.f));
    const vec3 p3 = world_to_clip(instMat * vec4(bbox.min.x, bbox.max.y, bbox.min.z, 1.f));
    const vec3 p4 = world_to_clip(instMat * vec4(bbox.max.x, bbox.min.y, bbox.min.z, 1.f));
    const vec3 p5 = world_to_clip(instMat * vec4(bbox.max.x, bbox.min.y, bbox.max.z, 1.f));
    const vec3 p6 = world_to_clip(instMat * vec4(bbox.min.x, bbox.max.y, bbox.max.z, 1.f));
    const vec3 p7 = world_to_clip(instMat * vec4(bbox.max.x, bbox.max.y, bbox.min.z, 1.f));
    const vec3 p8 = world_to_clip(instMat * bbox.max);

    if (
      point_is_in_frustum(p1) ||
      point_is_in_frustum(p2) ||
      point_is_in_frustum(p3) ||
      point_is_in_frustum(p4) ||
      point_is_in_frustum(p5) ||
      point_is_in_frustum(p6) ||
      point_is_in_frustum(p7) ||
      point_is_in_frustum(p8))
    {
      const uint destId =
        commands[inst.commandId].firstInstance +
        atomicAdd(commands[inst.commandId].instanceCount, 1);

      markedInstances[destId].matrixId = inst.matrixId;
      markedInstances[destId].materialId = inst.materialId;
    }
  }
}
