#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

#include "tonemapping.h"
#include "constants.h"
#include "cpp_glsl_compat.h"


layout(local_size_x = HISTOGRAM_WORK_GROUP_SIZE) in;

layout(binding = 0, set = 0) uniform sampler2D hdrImage;
layout(binding = 1, set = 0) writeonly buffer luminances_t
{
  float logLuminances[];
};

float load_luminance(ivec2 coord, ivec2 size)
{
  const vec4 col = textureLod(hdrImage, vec2(coord) / vec2(size), 0);
  return luminance_bt601(col);
}

void main(void)
{
  const ivec2 imSz = ivec2(textureSize(hdrImage, 0));
  const int globId = int(gl_GlobalInvocationID.x);
  const int localFirstPixel = globId * HISTOGRAM_PIXELS_PER_THREAD;
  const int localPixelCount =
    min(HISTOGRAM_PIXELS_PER_THREAD, logLuminances.length() - localFirstPixel);

  for (int p = localFirstPixel; p < localFirstPixel + localPixelCount; ++p)
  {
    const ivec2 imCoord = ivec2(p % imSz.x, p / imSz.x);
    if (imCoord.y < imSz.y)
    {
      const float logLuminance = to_logscale(load_luminance(imCoord, imSz));
      logLuminances[p] = logLuminance;
    }
    else
    {
      logLuminances[p] = SHADER_FLT_MAX;
    }
  }
}
